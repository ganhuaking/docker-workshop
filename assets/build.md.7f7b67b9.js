import{_ as a,o as e,c as s,O as l}from"./chunks/framework.1b1a3dad.js";const k=JSON.parse('{"title":"Docker Build","description":"","frontmatter":{},"headers":[],"relativePath":"build.md","filePath":"build.md"}'),o={name:"build.md"},n=l(`<h1 id="docker-build" tabindex="-1">Docker Build <a class="header-anchor" href="#docker-build" aria-label="Permalink to &quot;Docker Build&quot;">​</a></h1><h2 id="docker-image-concept" tabindex="-1">Docker Image Concept <a class="header-anchor" href="#docker-image-concept" aria-label="Permalink to &quot;Docker Image Concept&quot;">​</a></h2><ul><li>採用 <a href="https://philipzheng.gitbooks.io/docker_practice/content/underly/ufs.html" target="_blank" rel="noreferrer">Union 檔案系統</a></li><li>由 initial commit 開始，一層一層堆疊檔案系統</li><li>每一層的 commit 都視同是 Image</li><li>使用 <code>docker run</code> 可由 Image 產生 Container</li><li>使用 <code>docker commit</code> 可由 Container 產生 Image</li><li>使用 <code>docker build</code> 可由 Dockerfile 產生 Image</li></ul><p>Build 的過程，就是不斷的 <code>docker run</code> 與 <code>docker commit</code></p><h2 id="docker-build-workshop" tabindex="-1">Docker Build Workshop <a class="header-anchor" href="#docker-build-workshop" aria-label="Permalink to &quot;Docker Build Workshop&quot;">​</a></h2><p>寫一個 Dockerfile 的順序如下：</p><ol><li>一開始準備一個可以成功 build 的 Dockerfile</li><li>懶人可以利用一下 Makefile 和 Docker Compose</li><li>撰寫 Dockerfile 三循環 <ol><li>新增 Dockerfile 指令，包括安裝服務、修改服務設定、設定 Docker 參數等</li><li>執行 Build ，並產生 Container 驗證是否正確</li><li>優化 Dockerfile</li></ol></li></ol><p>以下會用上面的方法，來描述寫 Dockerfile 的過程。</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>什麼是一定會成功執行的 Dockerfile？其實只要 FROM 存在的 image 即可。</p><p>如 Golang 專案我們可以這樣寫：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> golang:alpine</span></span></code></pre></div><p>接著可以使用 <code>docker build</code> 與 <code>docker run</code> 確定該 image 是可以正常執行，且內容是如我們所想的</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker build -t example .</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run -it --rm example sh</span></span>
<span class="line"><span style="color:#A6ACCD;">/go #</span></span></code></pre></div><blockquote><p>build 與 run 的過程，可以使用 <a href="https://gist.github.com/MilesChou/c278f180b2c14af44bc752cdb437ab24" target="_blank" rel="noreferrer">Makefile</a> 來簡化</p></blockquote><h4 id="調整路徑" tabindex="-1">調整路徑 <a class="header-anchor" href="#調整路徑" aria-label="Permalink to &quot;調整路徑&quot;">​</a></h4><p>一開始這個路徑可能不是我們所想要，所以調整如下：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> mkdir -p /source</span></span>
<span class="line"><span style="color:#F78C6C;">WORKDIR</span><span style="color:#A6ACCD;"> /source</span></span></code></pre></div><p>執行結果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run -it --rm example sh</span></span>
<span class="line"><span style="color:#A6ACCD;">/source #</span></span></code></pre></div><h4 id="確認環境參數" tabindex="-1">確認環境參數 <a class="header-anchor" href="#確認環境參數" aria-label="Permalink to &quot;確認環境參數&quot;">​</a></h4><p>因現有專案使用 <code>go mod</code> 管理依賴，因此要確認環境變數是否有正確設定。預設 golang image 是沒有打開的，所以要額外設定：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> GO111MODULE on</span></span></code></pre></div><h4 id="複製專案程式與建置" tabindex="-1">複製專案程式與建置 <a class="header-anchor" href="#複製專案程式與建置" aria-label="Permalink to &quot;複製專案程式與建置&quot;">​</a></h4><p>接著就可以把程式複製進 <code>/source</code> 裡。範例如下：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#A6ACCD;"> src .</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> go mod download</span></span></code></pre></div><p>這裡執行會遇到一個問題：沒有 git，因為 <code>go mod download</code> 需要 git，因此我們得先為環境安裝 git 之後再安裝依賴。</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> apk add --no-cache git</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#A6ACCD;"> . .</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> go mod download</span></span></code></pre></div><h4 id="設定-entrypoint" tabindex="-1">設定 ENTRYPOINT <a class="header-anchor" href="#設定-entrypoint" aria-label="Permalink to &quot;設定 ENTRYPOINT&quot;">​</a></h4><p>最後設定執行程式的 <code>ENTRYPOINT</code> 即可：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">ENTRYPOINT</span><span style="color:#A6ACCD;"> [</span><span style="color:#C3E88D;">&quot;go&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;run&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;main.go&quot;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div><h4 id="整理-dockerfile" tabindex="-1">整理 Dockerfile <a class="header-anchor" href="#整理-dockerfile" aria-label="Permalink to &quot;整理 Dockerfile&quot;">​</a></h4><p>Dockerfile 在描述環境是如何建置的，所以在撰寫時，也是要有一定的順序，才會讓閱讀的人好理解；另一個考量則是，越不容易變動的描述放越上面，這樣才能有效利用 cache 來加速建置：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> golang:alpine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 環境設定會放最一開始</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> GO111MODULE on</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安裝建置依賴程式</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> apk add --no-cache git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 準備環境</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> mkdir -p /source</span></span>
<span class="line"><span style="color:#F78C6C;">WORKDIR</span><span style="color:#A6ACCD;"> /source</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 複製程式與建置</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#A6ACCD;"> . .</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> go mod download</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">ENTRYPOINT</span><span style="color:#A6ACCD;"> [</span><span style="color:#C3E88D;">&quot;go&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;run&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;main.go&quot;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://docs.google.com/presentation/d/1OrcP6FKFpLwmzPhmFH8-O9SHJEyu-_K69tPw2gqqsHs" target="_blank" rel="noreferrer">Docker Build</a> | Miles</li><li><a href="https://ithelp.ithome.com.tw/articles/10186279" target="_blank" rel="noreferrer">管理貨櫃的碼頭工人－－ Docker （ 2/3 ）</a> | CI 從入門到入坑</li></ul>`,36),c=[n];function p(t,i,r,d,C,u){return e(),s("div",null,c)}const y=a(o,[["render",p]]);export{k as __pageData,y as default};
